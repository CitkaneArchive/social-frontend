/* eslint-disable no-param-reassign */
/* eslint-disable no-use-before-define */
const zmq = require('zmq');
const ports = require('../../../topology/portMaps');

const serverErrorMsg = {
    status: 500,
    message: 'internal server error'
};

class Interface {
    constructor(serviceName) {
        this.publisher = zmq.socket('push');
        this.responder = zmq.socket('router');
        this.subscriber = zmq.socket('sub');
        this.publisher.bindSync(`tcp://127.0.0.1:${ports[serviceName].pubsub}`);
        this.responder.bindSync(`tcp://127.0.0.1:${ports[serviceName].crud}`);
        this.subscriber.connect(`tcp://127.0.0.1:${ports.pubsub}`);
    }

    throwError(identity, err) {
        console.log(err);
        this.responder.send([identity, '', serverErrorMsg]);
    }

    publish(topic, data) {
        try {
            const m = JSON.stringify([topic, data]);
            this.publisher.send(m);
        } catch (err) {
            console.log(err);
        }
    }

    subscribe(topic) {
        this.subscriber.subscribe(topic);
    }

    unsubscribe(topic) {
        this.subscriber.unsubscribe(topic);
    }

    makeResponder(apiInterface) {
        this.responder.on('message', (...args) => {
            const identity = args[0];
            try {
                const request = JSON.parse(args[2].toString());
                console.log(request);
                if (
                    !apiInterface[request.action]
                    || !apiInterface[request.action][request.command]
                ) {
                    return this.throwError(identity, new Error('Malformed api call'));
                }
                apiInterface[request.action][request.command](request)
                    .then((response) => {
                        this.responder.send([identity, '', JSON.stringify(response)]);
                    })
                    .catch((err) => {
                        console.log(new Error(err.message));
                        this.responder.send([identity, '', JSON.stringify(err)]);
                    });
            } catch (err) {
                console.log(err);
                this.throwError(identity, err);
            }
            return null;
        });
    }
}

module.exports = Interface;
